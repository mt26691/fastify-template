// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  name      String
  username  String   @unique
  email     String   @unique
  password  String
  salt      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  sessions     UserSession[]
  resetTokens  PasswordResetToken[]
  apiKeys      ApiKey[]

  @@map("users")
}

model UserSession {
  id                 String   @id @default(cuid())
  userId             String
  deviceId           String   @db.Uuid
  refreshToken       String   @unique
  userAgent          String?
  browser            String?
  ipAddresses        String[]
  refreshTokenExpiry DateTime @db.Timestamptz
  revokedAt          DateTime? @db.Timestamptz
  createdAt          DateTime @default(now()) @db.Timestamptz
  updatedAt          DateTime @updatedAt @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceId])
  @@index([refreshToken])
  @@map("user_sessions")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("password_reset_tokens")
}

model ApiKey {
  id        String    @id @default(cuid())
  key       String    @unique @map("api_key")
  name      String?   @map("name")
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  lastUsed  DateTime? @map("last_used") @db.Timestamptz
  expiresAt DateTime? @map("expires_at") @db.Timestamptz
  isActive  Boolean   @default(true) @map("is_active")

  @@index([userId], name: "api_key_user_id_idx")
  @@index([key], name: "api_key_key_idx")
  @@map("api_keys")
}